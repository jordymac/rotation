
> rotation@0.1.0 dev
> next dev

   ▲ Next.js 15.4.2
   - Local:        http://localhost:3000
   - Network:      http://192.168.20.29:3000
   - Environments: .env.local

 ✓ Starting...
 ✓ Ready in 2.1s
 ✓ Compiled /middleware in 286ms (108 modules)
 ○ Compiling /feed ...
 ✓ Compiled /feed in 5s (589 modules)
 GET /feed 200 in 5593ms
 ○ Compiling /api/stores/[storeId]/inventory ...
 ✓ Compiled /favicon.ico in 923ms (614 modules)
 GET /favicon.ico 200 in 371ms
 GET /feed 200 in 108ms
Error: Route "/api/stores/[storeId]/inventory" used `params.storeId`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/stores/[storeId]/inventory/route.ts:12:12)
  10 | ) {
  11 |   try {
> 12 |     const { storeId } = params;
     |            ^
  13 |     
  14 |     // Handle general feed case - now uses real Discogs data
  15 |     if (storeId === 'general-feed') {
Error: Route "/api/stores/[storeId]/inventory" used `params.storeId`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/stores/[storeId]/inventory/route.ts:12:12)
  10 | ) {
  11 |   try {
> 12 |     const { storeId } = params;
     |            ^
  13 |     
  14 |     // Handle general feed case - now uses real Discogs data
  15 |     if (storeId === 'general-feed') {
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
 GET /api/stores/general-feed/inventory 200 in 3746ms
 GET /api/stores/general-feed/inventory 200 in 3341ms
 ✓ Compiled in 1492ms (572 modules)
 GET /feed 200 in 260ms
 ✓ Compiled in 297ms (239 modules)
 GET /feed 200 in 58ms
 ✓ Compiled in 372ms (239 modules)
 ○ Compiling /_not-found ...
 ✓ Compiled /_not-found in 1565ms (563 modules)
 GET /feed 404 in 1370ms
 GET /feed 200 in 61ms
 GET /feed 200 in 308ms
 ✓ Compiled in 407ms (243 modules)
 ✓ Compiled /api/stores/[storeId]/inventory in 167ms (374 modules)
 GET /feed 200 in 131ms
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
 GET /api/stores/general-feed/inventory 200 in 3519ms
 ✓ Compiled in 2.3s (572 modules)
 GET /feed 200 in 424ms
 ✓ Compiled in 933ms (572 modules)
 GET /feed 200 in 320ms
 ✓ Compiled in 741ms (572 modules)
 GET /feed 200 in 305ms
 ✓ Compiled in 963ms (572 modules)
 GET /feed 200 in 239ms
 ✓ Compiled in 1809ms (572 modules)
 GET /feed 200 in 333ms
 ✓ Compiled in 1119ms (572 modules)
 GET /feed 200 in 373ms
 ✓ Compiled in 1436ms (572 modules)
 GET /feed 200 in 285ms
 ✓ Compiled in 1011ms (572 modules)
 GET /feed 200 in 325ms
 ✓ Compiled in 924ms (572 modules)
 GET /feed 200 in 360ms
 ✓ Compiled in 1033ms (572 modules)
 GET /feed 200 in 297ms
 ✓ Compiled in 1281ms (572 modules)
 GET /feed 200 in 214ms
 ✓ Compiled in 1485ms (572 modules)
 GET /feed 200 in 252ms
 ✓ Compiled in 994ms (572 modules)
 GET /feed 200 in 207ms
 ✓ Compiled in 582ms (572 modules)
 GET /feed 200 in 170ms
 GET /feed 200 in 253ms
 ✓ Compiled /api/stores/[storeId]/inventory in 491ms (350 modules)
 ✓ Compiled (375 modules)
 GET /favicon.ico 200 in 940ms
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
 GET /api/stores/general-feed/inventory 200 in 2865ms
 ✓ Compiled in 720ms (239 modules)
 ✓ Compiled in 442ms (239 modules)
 GET /feed 200 in 347ms
 GET /feed 200 in 145ms
 ✓ Compiled in 1516ms (572 modules)
 GET /feed 200 in 677ms
 ✓ Compiled in 1575ms (572 modules)
 GET /feed 200 in 539ms
 ✓ Compiled in 1139ms (572 modules)
 GET /feed 200 in 311ms
 ✓ Compiled in 1016ms (572 modules)
 GET /feed 200 in 429ms
 ○ Compiling /stores ...
 ✓ Compiled /stores in 778ms (571 modules)
 GET /stores 200 in 1188ms
 GET /feed?store=fanatico_records 200 in 89ms
 ✓ Compiled /api/stores/[storeId]/inventory in 267ms (381 modules)
 GET /api/stores/fanatico_records/inventory 404 in 455ms
 ○ Compiling / ...
 ✓ Compiled / in 668ms (678 modules)
 GET / 200 in 1136ms
 ✓ Compiled /admin in 283ms (685 modules)
 GET /admin 200 in 566ms
 ✓ Compiled /api/admin/stores in 287ms (687 modules)
 GET /api/admin/stores 200 in 399ms
 GET /api/admin/stores 200 in 36ms
 ✓ Compiled /stores/[storeId] in 436ms (704 modules)
 GET /stores/1640995200000 200 in 1517ms
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 1621ms
 ✓ Compiled in 2.2s (671 modules)
 GET /admin 200 in 862ms
 GET /stores/1640995200000 200 in 893ms
 ✓ Compiled in 1738ms (671 modules)
 GET /admin 200 in 473ms
 GET /stores/1640995200000 200 in 485ms
 ✓ Compiled in 1741ms (671 modules)
 GET /admin 200 in 345ms
 GET /stores/1640995200000 200 in 325ms
 ✓ Compiled in 1747ms (671 modules)
 GET /admin 200 in 363ms
 GET /stores/1640995200000 200 in 358ms
 ✓ Compiled in 950ms (671 modules)
 GET /admin 200 in 368ms
 GET /stores/1640995200000 200 in 603ms
 ✓ Compiled in 1687ms (671 modules)
 GET /admin 200 in 475ms
 GET /stores/1640995200000 200 in 471ms
 ✓ Compiled /api/stores/[storeId]/inventory in 1777ms (671 modules)
 ✓ Compiled in 1ms (448 modules)
Fetching inventory for store: fanatico_records
 GET /admin 200 in 1300ms
 GET /stores/1640995200000 200 in 1147ms
 GET /api/stores/1640995200000/inventory 200 in 3187ms
 ✓ Compiled in 1573ms (711 modules)
 ✓ Compiled in 0ms (448 modules)
 ✓ Compiled in 1ms (448 modules)
 ✓ Compiled in 1ms (448 modules)
Fetching inventory for store: fanatico_records
 GET /admin 200 in 1463ms
 GET /stores/1640995200000 200 in 1456ms
 GET /api/stores/1640995200000/inventory 200 in 2244ms
 ✓ Compiled in 2.2s (711 modules)
 GET /admin 200 in 432ms
 GET /stores/1640995200000 200 in 385ms
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 1370ms
 ✓ Compiled in 1147ms (711 modules)
 ✓ Compiled in 1ms (448 modules)
 ✓ Compiled in 0ms (448 modules)
 ✓ Compiled in 0ms (448 modules)
Fetching inventory for store: fanatico_records
 GET /admin 200 in 1409ms
 GET /stores/1640995200000 200 in 1394ms
 GET /api/stores/1640995200000/inventory 200 in 2671ms
 ✓ Compiled in 2.7s (671 modules)
 GET /admin 200 in 504ms
 GET /stores/1640995200000 200 in 493ms
 ✓ Compiled in 856ms (671 modules)
 GET /admin 200 in 609ms
 GET /stores/1640995200000 200 in 615ms
 ✓ Compiled in 1330ms (671 modules)
 GET /admin 200 in 363ms
 GET /stores/1640995200000 200 in 445ms
 ✓ Compiled in 811ms (671 modules)
 GET /admin 200 in 155ms
 GET /stores/1640995200000 200 in 157ms
 ✓ Compiled in 640ms (671 modules)
 GET /admin 200 in 190ms
 GET /stores/1640995200000 200 in 199ms
 ✓ Compiled in 994ms (671 modules)
 GET /stores/1640995200000 200 in 241ms
 ✓ Compiled /api/stores/[storeId]/inventory in 1471ms (671 modules)
 ✓ Compiled in 0ms (448 modules)
Fetching inventory for store: fanatico_records
 GET /stores/1640995200000 200 in 1117ms
 GET /api/stores/1640995200000/inventory 200 in 3137ms
 ✓ Compiled in 2.2s (711 modules)
 GET /stores/1640995200000 200 in 321ms
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 1381ms
 ✓ Compiled in 1265ms (671 modules)
 GET /stores/1640995200000 200 in 399ms
 ✓ Compiled in 952ms (671 modules)
 GET /stores/1640995200000 200 in 213ms
 ✓ Compiled in 757ms (671 modules)
 GET /stores/1640995200000 200 in 148ms
 ✓ Compiled in 1609ms (671 modules)
 GET /stores/1640995200000 200 in 239ms
 ○ Compiling /api/stores/[storeId]/inventory ...
 ✓ Compiled /api/stores/[storeId]/inventory in 995ms (448 modules)
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 2971ms
 ✓ Compiled in 1110ms (711 modules)
 ✓ Compiled in 1ms (448 modules)
 ✓ Compiled in 1ms (448 modules)
 ✓ Compiled in 1ms (448 modules)
Fetching inventory for store: fanatico_records
 GET /stores/1640995200000 200 in 1403ms
 GET /api/stores/1640995200000/inventory 200 in 2873ms
 ✓ Compiled in 1025ms (711 modules)
 GET /stores/1640995200000 200 in 328ms
 ✓ Compiled in 1002ms (711 modules)
 GET /stores/1640995200000 200 in 135ms
 ✓ Compiled in 1554ms (711 modules)
 GET /stores/1640995200000 200 in 228ms
 ✓ Compiled in 782ms (711 modules)
 GET /stores/1640995200000 200 in 106ms
 ✓ Compiled in 2.3s (671 modules)
 GET /stores/1640995200000 200 in 621ms
 ✓ Compiled in 898ms (671 modules)
 GET /stores/1640995200000 200 in 297ms
 ✓ Compiled in 1106ms (671 modules)
 GET /stores/1640995200000 200 in 249ms
 ✓ Compiled in 1473ms (671 modules)
 GET /stores/1640995200000 200 in 183ms
 ✓ Compiled in 827ms (671 modules)
 GET /stores/1640995200000 200 in 137ms
 ✓ Compiled /api/stores/[storeId]/inventory in 1308ms (671 modules)
 ✓ Compiled in 1ms (448 modules)
Fetching inventory for store: fanatico_records
 GET /stores/1640995200000 200 in 893ms
 GET /api/stores/1640995200000/inventory 200 in 3517ms
 ✓ Compiled in 1859ms (671 modules)
 GET /stores/1640995200000 200 in 600ms
 ✓ Compiled /api/stores/[storeId]/inventory in 330ms (448 modules)
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 3242ms
 ✓ Compiled in 1101ms (711 modules)
 GET /stores/1640995200000 200 in 301ms
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 3181ms
 ✓ Compiled in 791ms (263 modules)
 GET /stores/1640995200000 200 in 96ms
 ✓ Compiled in 1269ms (779 modules)
 GET /stores/1640995200000 200 in 1246ms
 GET /stores/1640995200000 200 in 62ms
 ✓ Compiled in 301ms (263 modules)
 GET /stores/1640995200000 200 in 144ms
 GET /stores/1640995200000 200 in 102ms
 ✓ Compiled in 613ms (263 modules)
 GET /stores/1640995200000 200 in 115ms
 ✓ Compiled in 1616ms (671 modules)
 GET /stores/1640995200000 200 in 245ms
 ✓ Compiled in 734ms (671 modules)
 GET /stores/1640995200000 200 in 183ms
 ✓ Compiled in 1738ms (673 modules)
 GET /stores/1640995200000 200 in 130ms
 ✓ Compiled / in 401ms (414 modules)
 GET / 200 in 914ms
 GET /feed 200 in 45ms
 ○ Compiling /api/stores/[storeId]/inventory ...
 ✓ Compiled /api/stores/[storeId]/inventory in 685ms (454 modules)
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
 GET /api/stores/general-feed/inventory 200 in 2708ms
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
 GET /api/stores/general-feed/inventory 200 in 1604ms
 ✓ Compiled in 1575ms (679 modules)
 GET /feed 200 in 383ms
 GET /stores/1640995200000 200 in 386ms
 ✓ Compiled in 989ms (679 modules)
 GET /feed 200 in 416ms
 GET /stores/1640995200000 200 in 466ms
 ✓ Compiled in 748ms (679 modules)
 GET /feed 200 in 460ms
 GET /stores/1640995200000 200 in 479ms
 ✓ Compiled in 932ms (679 modules)
 GET /feed 200 in 282ms
 GET /stores/1640995200000 200 in 421ms
 ✓ Compiled in 810ms (673 modules)
 GET /feed 200 in 185ms
 GET /stores/1640995200000 200 in 225ms
 ✓ Compiled in 842ms (673 modules)
 GET /feed 200 in 136ms
 GET /stores/1640995200000 200 in 147ms
 ✓ Compiled in 585ms (673 modules)
 GET /feed 200 in 139ms
 GET /stores/1640995200000 200 in 126ms
 ✓ Compiled in 1194ms (673 modules)
 ⚠ Fast Refresh had to perform a full reload due to a runtime error.
 GET /feed 200 in 351ms
 GET /stores/1640995200000 200 in 346ms
 GET /feed 200 in 492ms
 ✓ Compiled /api/stores/[storeId]/inventory in 449ms (426 modules)
 ✓ Compiled (451 modules)
 GET /favicon.ico 200 in 824ms
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
 GET /api/stores/general-feed/inventory 200 in 2171ms
 ⚠ Fast Refresh had to perform a full reload due to a runtime error.
 ✓ Compiled in 1093ms (715 modules)
 ✓ Compiled in 0ms (451 modules)
 ✓ Compiled in 0ms (451 modules)
 ✓ Compiled in 1ms (451 modules)
 GET /feed 200 in 2008ms
 GET /stores/1640995200000 200 in 2119ms
 GET /favicon.ico 200 in 62ms
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
 GET /api/stores/general-feed/inventory 200 in 1623ms
 ✓ Compiled in 1516ms (715 modules)
 ⚠ Fast Refresh had to perform a full reload due to a runtime error.
 GET /stores/1640995200000 200 in 1120ms
 GET /feed 200 in 1134ms
 GET /favicon.ico 200 in 72ms
Curated feed data fetched: {
  listingsLength: 50,
  pagination: {
    page: 1,
    pages: 44,
    per_page: 50,
    items: 2160,
    urls: {
      last: 'https://api.discogs.com/users/fanatico_records/inventory?page=44&per_page=50',
      next: 'https://api.discogs.com/users/fanatico_records/inventory?page=2&per_page=50'
    }
  }
}
 GET /api/stores/general-feed/inventory 200 in 1746ms
 ○ Compiling /api/stores/[storeId]/inventory ...
 ✓ Compiled /api/stores/[storeId]/inventory in 1508ms (673 modules)
 ✓ Compiled in 1ms (449 modules)
Fetching inventory for store: fanatico_records
 GET /stores/1640995200000 200 in 990ms
 GET /feed 200 in 1014ms
 GET /api/stores/1640995200000/inventory 200 in 3876ms
 ✓ Compiled in 1017ms (713 modules)
 GET /feed 200 in 304ms
 GET /stores/1640995200000 200 in 346ms
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 2433ms
 ✓ Compiled in 618ms (713 modules)
 ✓ Compiled in 1ms (449 modules)
 ✓ Compiled in 1ms (449 modules)
 ✓ Compiled in 1ms (449 modules)
Fetching inventory for store: fanatico_records
 GET /feed 200 in 1092ms
 GET /stores/1640995200000 200 in 1088ms
 GET /api/stores/1640995200000/inventory 200 in 3297ms
 ✓ Compiled in 1255ms (713 modules)
 ✓ Compiled in 0ms (449 modules)
 ✓ Compiled in 0ms (449 modules)
 ✓ Compiled in 0ms (449 modules)
Fetching inventory for store: fanatico_records
 GET /feed 200 in 1258ms
 GET /stores/1640995200000 200 in 1254ms
 GET /api/stores/1640995200000/inventory 200 in 4491ms
 ✓ Compiled in 1056ms (713 modules)
 ✓ Compiled in 0ms (449 modules)
 ✓ Compiled in 0ms (449 modules)
 ✓ Compiled in 1ms (449 modules)
Fetching inventory for store: fanatico_records
 GET /feed 200 in 1039ms
 GET /stores/1640995200000 200 in 1032ms
 GET /api/stores/1640995200000/inventory 200 in 3246ms
 ✓ Compiled in 601ms (713 modules)
 GET /feed 200 in 266ms
 GET /stores/1640995200000 200 in 283ms
 ✓ Compiled in 844ms (713 modules)
 GET /feed 200 in 214ms
 GET /stores/1640995200000 200 in 185ms
 ✓ Compiled in 1585ms (713 modules)
 GET /feed 200 in 314ms
 GET /stores/1640995200000 200 in 326ms
 ✓ Compiled in 1127ms (719 modules)
 GET /feed 200 in 364ms
 GET /stores/1640995200000 200 in 397ms
 ○ Compiling /api/admin/releases/[releaseId]/audio-match ...
 ✓ Compiled /api/admin/releases/[releaseId]/audio-match in 1400ms (685 modules)
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 2,
  mediumConfidence: 38,
  lowConfidence: 0,
  autoApproved: 2,
  needsReview: 38
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 2, Need review: 38
 GET /api/admin/releases/17268217/audio-match 200 in 8329ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 4,
  mediumConfidence: 36,
  lowConfidence: 0,
  autoApproved: 4,
  needsReview: 36
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 4, Need review: 36
 GET /api/admin/releases/17268217/audio-match 200 in 5169ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 2,
  mediumConfidence: 38,
  lowConfidence: 0,
  autoApproved: 2,
  needsReview: 38
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 2, Need review: 38
 GET /api/admin/releases/17268217/audio-match 200 in 5147ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 3,
  mediumConfidence: 37,
  lowConfidence: 0,
  autoApproved: 3,
  needsReview: 37
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 3, Need review: 37
 GET /api/admin/releases/17268217/audio-match 200 in 5166ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 2 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 2 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 6,
  mediumConfidence: 34,
  lowConfidence: 0,
  autoApproved: 6,
  needsReview: 34
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 6, Need review: 34
 GET /api/admin/releases/17268217/audio-match 200 in 5185ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 4,
  mediumConfidence: 36,
  lowConfidence: 0,
  autoApproved: 4,
  needsReview: 36
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 4, Need review: 36
 GET /api/admin/releases/17268217/audio-match 200 in 5139ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 2,
  mediumConfidence: 38,
  lowConfidence: 0,
  autoApproved: 2,
  needsReview: 38
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 2, Need review: 38
 GET /api/admin/releases/17268217/audio-match 200 in 5552ms
 ✓ Compiled in 3.2s (699 modules)
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
 GET /feed 200 in 771ms
 GET /stores/1640995200000 200 in 816ms
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 3,
  mediumConfidence: 37,
  lowConfidence: 0,
  autoApproved: 3,
  needsReview: 37
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 3, Need review: 37
 GET /api/admin/releases/17268217/audio-match 200 in 8794ms
 ✓ Compiled in 1087ms (701 modules)
 GET /feed 200 in 548ms
 GET /stores/1640995200000 200 in 596ms
 ✓ Compiled in 1644ms (701 modules)
 GET /feed 200 in 333ms
 GET /stores/1640995200000 200 in 364ms
 ✓ Compiled in 3s (701 modules)
 ⚠ Fast Refresh had to perform a full reload due to a runtime error.
 GET /feed 200 in 706ms
 GET /stores/1640995200000 200 in 855ms
 GET /stores/1640995200000 200 in 897ms
 ○ Compiling /api/stores/[storeId]/inventory ...
 ✓ Compiled /api/stores/[storeId]/inventory in 651ms (435 modules)
 ✓ Compiled (458 modules)
 GET /favicon.ico 200 in 1148ms
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 4264ms
 ✓ Compiled in 1129ms (723 modules)
 GET /feed 200 in 398ms
 GET /stores/1640995200000 200 in 449ms
 ✓ Compiled in 1078ms (723 modules)
 GET /feed 200 in 268ms
 GET /stores/1640995200000 200 in 312ms
 ✓ Compiled in 1912ms (725 modules)
 GET /feed 200 in 231ms
 GET /stores/1640995200000 200 in 219ms
 ✓ Compiled in 1132ms (683 modules)
 GET /feed 200 in 384ms
 GET /stores/1640995200000 200 in 481ms
 ✓ Compiled in 704ms (683 modules)
 GET /feed 200 in 327ms
 GET /stores/1640995200000 200 in 378ms
 ○ Compiling /api/admin/releases/[releaseId]/audio-match ...
 ✓ Compiled /api/admin/releases/[releaseId]/audio-match in 600ms (434 modules)
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 0,
  mediumConfidence: 40,
  lowConfidence: 0,
  autoApproved: 0,
  needsReview: 40
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 0, Need review: 40
 GET /api/admin/releases/17268217/audio-match 200 in 6043ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 1,
  mediumConfidence: 39,
  lowConfidence: 0,
  autoApproved: 1,
  needsReview: 39
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 1, Need review: 39
 GET /api/admin/releases/17268217/audio-match 200 in 5244ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 2 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 2 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 5,
  mediumConfidence: 35,
  lowConfidence: 0,
  autoApproved: 5,
  needsReview: 35
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 5, Need review: 35
 GET /api/admin/releases/17268217/audio-match 200 in 5215ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[Apple Music API] Searching: Hideo Shimazu - Slipping Into April
[Spotify API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[Apple Music API] Searching: Hideo Shimazu - Spring Prayer
[Spotify API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Apple Music API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[Spotify API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[Apple Music API] Searching: Hideo Shimazu - Napping Faust
[Spotify API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[Apple Music API] Searching: Hideo Shimazu - Green Waltz
[Spotify API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[Apple Music API] Searching: Hideo Shimazu - Silver Spring Rain
[Spotify API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[Apple Music API] Searching: Hideo Shimazu - Calmness
[Spotify API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 1 auto-approved, 4 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[Apple Music API] Searching: Hideo Shimazu - Blue Mountain
[Spotify API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 5 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 3,
  mediumConfidence: 37,
  lowConfidence: 0,
  autoApproved: 3,
  needsReview: 37
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 3, Need review: 37
 GET /api/admin/releases/17268217/audio-match 200 in 5153ms
 ✓ Compiled in 1611ms (683 modules)
 ✓ Compiled in 578ms (683 modules)
 GET /stores/1640995200000 200 in 415ms
 ✓ Compiled /api/stores/[storeId]/inventory in 355ms (431 modules)
 ✓ Compiled (456 modules)
 GET /favicon.ico 200 in 1027ms
Fetching inventory for store: fanatico_records
 GET /api/stores/1640995200000/inventory 200 in 4103ms
 ✓ Compiled in 345ms (269 modules)
 GET /stores/1640995200000 200 in 207ms
 ✓ Compiled /api/admin/releases/[releaseId]/audio-match in 227ms (459 modules)
 GET /stores/1640995200000 200 in 180ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 0,
  mediumConfidence: 24,
  lowConfidence: 0,
  autoApproved: 0,
  needsReview: 24
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 0, Need review: 24
 GET /api/admin/releases/17268217/audio-match 200 in 4892ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 1,
  mediumConfidence: 23,
  lowConfidence: 0,
  autoApproved: 1,
  needsReview: 23
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 1, Need review: 23
 GET /api/admin/releases/17268217/audio-match 200 in 4383ms
 ✓ Compiled in 3.7s (683 modules)
 GET /stores/1640995200000 200 in 471ms
 ○ Compiling /api/admin/releases/[releaseId]/audio-match ...
 ✓ Compiled /api/admin/releases/[releaseId]/audio-match in 688ms (434 modules)
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 2 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 4,
  mediumConfidence: 20,
  lowConfidence: 0,
  autoApproved: 4,
  needsReview: 20
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 4, Need review: 20
 GET /api/admin/releases/17268217/audio-match 200 in 5521ms
 ✓ Compiled in 1000ms (703 modules)
 GET /stores/1640995200000 200 in 472ms
 ✓ Compiled in 1503ms (703 modules)
 GET /stores/1640995200000 200 in 356ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 2,
  mediumConfidence: 22,
  lowConfidence: 0,
  autoApproved: 2,
  needsReview: 22
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 2, Need review: 22
 GET /api/admin/releases/17268217/audio-match 200 in 4556ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 4,
  mediumConfidence: 20,
  lowConfidence: 0,
  autoApproved: 4,
  needsReview: 20
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 4, Need review: 20
 GET /api/admin/releases/17268217/audio-match 200 in 4577ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[AudioMatchingService] Track A1: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[AudioMatchingService] Track A2: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[AudioMatchingService] Track A3: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[AudioMatchingService] Track A4: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[AudioMatchingService] Track B1: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[AudioMatchingService] Track B2: 0 auto-approved, 3 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[AudioMatchingService] Track B3: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[AudioMatchingService] Track B4: 1 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 3,
  mediumConfidence: 21,
  lowConfidence: 0,
  autoApproved: 3,
  needsReview: 21
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 3, Need review: 21
 GET /api/admin/releases/17268217/audio-match 200 in 5370ms
 ✓ Compiled in 2.1s (683 modules)
 GET /stores/1640995200000 200 in 214ms
 ✓ Compiled /api/admin/releases/[releaseId]/audio-match in 922ms (683 modules)
 ✓ Compiled in 1ms (434 modules)
 GET /stores/1640995200000 200 in 793ms
 GET /stores/1640995200000 200 in 50ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] No client ID found, using mock data
[AudioMatchingService] Track A1: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] No client ID found, using mock data
[AudioMatchingService] Track A2: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] No client ID found, using mock data
[AudioMatchingService] Track A3: 1 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] No client ID found, using mock data
[AudioMatchingService] Track A4: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] No client ID found, using mock data
[AudioMatchingService] Track B1: 1 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] No client ID found, using mock data
[AudioMatchingService] Track B2: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] No client ID found, using mock data
[AudioMatchingService] Track B3: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] No client ID found, using mock data
[AudioMatchingService] Track B4: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 2,
  mediumConfidence: 14,
  lowConfidence: 0,
  autoApproved: 2,
  needsReview: 14
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 2, Need review: 14
 GET /api/admin/releases/17268217/audio-match 200 in 5865ms
 ✓ Compiled in 595ms (703 modules)
 GET /stores/1640995200000 200 in 188ms
 ✓ Compiled in 837ms (703 modules)
 GET /stores/1640995200000 200 in 261ms
 ✓ Compiled in 1080ms (683 modules)
 GET /stores/1640995200000 200 in 394ms
 ✓ Compiled in 596ms (269 modules)
 ✓ Compiled in 300ms (269 modules)
 GET /stores/1640995200000 200 in 122ms
 GET /stores/1640995200000 200 in 38ms
 ✓ Compiled in 328ms (269 modules)
 GET /stores/1640995200000 200 in 45ms
 ✓ Compiled in 319ms (269 modules)
 GET /stores/1640995200000 200 in 86ms
 ✓ Compiled in 264ms (269 modules)
 GET /stores/1640995200000 200 in 30ms
 ✓ Compiled in 236ms (269 modules)
 ✓ Compiled in 258ms (269 modules)
 GET /stores/1640995200000 200 in 149ms
 GET /stores/1640995200000 200 in 45ms
 ✓ Compiled /api/admin/releases/[releaseId]/audio-match in 400ms (434 modules)
 GET /stores/1640995200000 200 in 141ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track A1: 1 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track A2: 1 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track A3: 1 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track A4: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track B1: 1 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track B2: 1 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track B3: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track B4: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 5,
  mediumConfidence: 11,
  lowConfidence: 0,
  autoApproved: 5,
  needsReview: 11
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 5, Need review: 11
 GET /api/admin/releases/17268217/audio-match 200 in 5581ms
[API] Starting audio matching for "Then, Spring······" by Hideo Shimazu
[API] Processing 8 of 8 tracks
[AudioMatchingService] Starting audio matching for release 17268217
[AudioMatchingService] Processing up to 10 tracks (8 total)
[AudioMatchingService] Processing track: A1 - Slipping Into April
[YouTube API] Searching: Hideo Shimazu - Slipping Into April
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Slipping Into April
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track A1: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A2 - Spring Prayer
[YouTube API] Searching: Hideo Shimazu - Spring Prayer
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Spring Prayer
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track A2: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A3 - Atelier Under The Sun-Beams
[YouTube API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Atelier Under The Sun-Beams
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track A3: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: A4 - Napping Faust
[YouTube API] Searching: Hideo Shimazu - Napping Faust
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Napping Faust
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track A4: 1 auto-approved, 1 need review, 0 rejected
[AudioMatchingService] Processing track: B1 - Green Waltz
[YouTube API] Searching: Hideo Shimazu - Green Waltz
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Green Waltz
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track B1: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B2 - Silver Spring Rain
[YouTube API] Searching: Hideo Shimazu - Silver Spring Rain
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Silver Spring Rain
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track B2: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B3 - Calmness
[YouTube API] Searching: Hideo Shimazu - Calmness
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Calmness
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track B3: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Processing track: B4 - Blue Mountain
[YouTube API] Searching: Hideo Shimazu - Blue Mountain
[YouTube API] No API key found, using mock data
[SoundCloud API] Searching: Hideo Shimazu - Blue Mountain
[SoundCloud API] No client ID found, using mock data
[SoundCloud API] To get a client ID: Go to soundcloud.com → F12 → Network → look for api-v2.soundcloud.com requests
[AudioMatchingService] Track B4: 0 auto-approved, 2 need review, 0 rejected
[AudioMatchingService] Summary: {
  highConfidence: 1,
  mediumConfidence: 15,
  lowConfidence: 0,
  autoApproved: 1,
  needsReview: 15
}
[API] Audio matching completed for release 17268217
[API] Auto-approved: 1, Need review: 15
 GET /api/admin/releases/17268217/audio-match 200 in 4364ms
 ✓ Compiled in 779ms (797 modules)
 GET /stores/1640995200000 200 in 226ms
   Reload env: .env.local
 ✓ Compiled in 7.7s (829 modules)
 GET /stores/1640995200000 200 in 209ms
 ✓ Compiled in 649ms (269 modules)
 ✓ Compiled in 321ms (269 modules)
 GET /stores/1640995200000 200 in 219ms
 GET /stores/1640995200000 200 in 58ms
   Reload env: .env.local
 ✓ Compiled in 2.7s (809 modules)
 GET /stores/1640995200000 200 in 228ms
 ⨯ ./src/components/AudioMatchPopup.tsx
Error:   [31mx[0m Unexpected token. Did you mean `{'>'}` or `&gt;`?
     ,-[[36;1;4m/Users/placeos/rotation/src/components/AudioMatchPopup.tsx[0m:370:1]
 [2m367[0m |                             <div>SoundCloud matching is temporarily disabled while we perfect the YouTube integration. This allows us to achieve high accuracy with YouTube video embeds.</div>
 [2m368[0m |                           </div>
 [2m369[0m |                         </div>
 [2m370[0m |                             soundcloudCandidates.map(candidate => {
     : [35;1m                                                                ^[0m
 [2m371[0m |                               const isSelected = selectedCandidateId === candidate.id;
 [2m372[0m |                               const decisionKey = `${match.trackPosition}-${candidate.id}`;
 [2m373[0m |                               const isProcessing = processingDecisions.has(decisionKey);
     `----
  [31mx[0m Expected '</', got 'const'
     ,-[[36;1;4m/Users/placeos/rotation/src/components/AudioMatchPopup.tsx[0m:371:1]
 [2m368[0m |                           </div>
 [2m369[0m |                         </div>
 [2m370[0m |                             soundcloudCandidates.map(candidate => {
 [2m371[0m |                               const isSelected = selectedCandidateId === candidate.id;
     : [35;1m                              ^^^^^[0m
 [2m372[0m |                               const decisionKey = `${match.trackPosition}-${candidate.id}`;
 [2m373[0m |                               const isProcessing = processingDecisions.has(decisionKey);
 [2m374[0m |                               
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/components/AudioMatchPopup.tsx
./src/components/RecordManagementModal.tsx
./src/app/stores/[storeId]/page.tsx
 ○ Compiling /_error ...
 ⨯ ./src/components/AudioMatchPopup.tsx
Error:   [31mx[0m Unexpected token. Did you mean `{'>'}` or `&gt;`?
     ,-[[36;1;4m/Users/placeos/rotation/src/components/AudioMatchPopup.tsx[0m:370:1]
 [2m367[0m |                             <div>SoundCloud matching is temporarily disabled while we perfect the YouTube integration. This allows us to achieve high accuracy with YouTube video embeds.</div>
 [2m368[0m |                           </div>
 [2m369[0m |                         </div>
 [2m370[0m |                             soundcloudCandidates.map(candidate => {
     : [35;1m                                                                ^[0m
 [2m371[0m |                               const isSelected = selectedCandidateId === candidate.id;
 [2m372[0m |                               const decisionKey = `${match.trackPosition}-${candidate.id}`;
 [2m373[0m |                               const isProcessing = processingDecisions.has(decisionKey);
     `----
  [31mx[0m Expected '</', got 'const'
     ,-[[36;1;4m/Users/placeos/rotation/src/components/AudioMatchPopup.tsx[0m:371:1]
 [2m368[0m |                           </div>
 [2m369[0m |                         </div>
 [2m370[0m |                             soundcloudCandidates.map(candidate => {
 [2m371[0m |                               const isSelected = selectedCandidateId === candidate.id;
     : [35;1m                              ^^^^^[0m
 [2m372[0m |                               const decisionKey = `${match.trackPosition}-${candidate.id}`;
 [2m373[0m |                               const isProcessing = processingDecisions.has(decisionKey);
 [2m374[0m |                               
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/components/AudioMatchPopup.tsx
./src/components/RecordManagementModal.tsx
./src/app/stores/[storeId]/page.tsx
 GET /stores/1640995200000 500 in 4193ms
 GET /stores/1640995200000 500 in 13ms
 GET /stores/1640995200000 500 in 14ms
 GET /stores/1640995200000 500 in 17ms
 ⨯ ./src/components/AudioMatchPopup.tsx
Error:   [31mx[0m Unterminated regexp literal
     ,-[[36;1;4m/Users/placeos/rotation/src/components/AudioMatchPopup.tsx[0m:372:1]
 [2m369[0m |                         </div>
 [2m370[0m |                         </div>
 [2m371[0m |                       </div>
 [2m372[0m |                     </div>
     : [35;1m                     ^^^^^[0m
 [2m373[0m |                   );
 [2m374[0m |                 })}
 [2m375[0m |               </div>
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/components/AudioMatchPopup.tsx
./src/components/RecordManagementModal.tsx
./src/app/stores/[storeId]/page.tsx
 ⨯ ./src/components/AudioMatchPopup.tsx
Error:   [31mx[0m Unterminated regexp literal
     ,-[[36;1;4m/Users/placeos/rotation/src/components/AudioMatchPopup.tsx[0m:385:1]
 [2m382[0m |                           </p>
 [2m383[0m |                         </div>
 [2m384[0m |                       </div>
 [2m385[0m |                     </div>
     : [35;1m                     ^^^^^[0m
 [2m386[0m |                   );
 [2m387[0m |                 })}
 [2m388[0m |               </div>
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/components/AudioMatchPopup.tsx
./src/components/RecordManagementModal.tsx
./src/app/stores/[storeId]/page.tsx
 ⨯ ./src/components/AudioMatchPopup.tsx
Error:   [31mx[0m Unterminated regexp literal
     ,-[[36;1;4m/Users/placeos/rotation/src/components/AudioMatchPopup.tsx[0m:385:1]
 [2m382[0m |                           </p>
 [2m383[0m |                         </div>
 [2m384[0m |                       </div>
 [2m385[0m |                     </div>
     : [35;1m                     ^^^^^[0m
 [2m386[0m |                   );
 [2m387[0m |                 })}
 [2m388[0m |               </div>
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/components/AudioMatchPopup.tsx
./src/components/RecordManagementModal.tsx
./src/app/stores/[storeId]/page.tsx
 ⨯ ./src/components/AudioMatchPopup.tsx
Error:   [31mx[0m Expected unicode escape
   ,-[[36;1;4m/Users/placeos/rotation/src/components/AudioMatchPopup.tsx[0m:1:1]
 [2m1[0m | 'use client';\n\nimport { useState, useEffect } from 'react';\nimport { XMarkIcon, PlayIcon, PauseIcon, CheckIcon } from '@heroicons/react/24/outline';\nimport { TrackCandidate, AudioMatchResult } from '@/lib/audio-matching-service';\n\ninterface AudioMatchPopupProps {\n  releaseId: number;\n  releaseTitle: string;\n  releaseArtist: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AudioMatchPopup({ releaseId, releaseTitle, releaseArtist, isOpen, onClose }: AudioMatchPopupProps) {\n  const [matchData, setMatchData] = useState<AudioMatchResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [playingAudio, setPlayingAudio] = useState<string | null>(null);\n  const [processingDecisions, setProcessingDecisions] = useState<Set<string>>(new Set());\n  const [selectedMatches, setSelectedMatches] = useState<Map<string, string>>(new Map());\n\n  // Load audio matches when popup opens\n  useEffect(() => {\n    if (isOpen && !matchData) {\n      loadAudioMatches();\n    }\n  }, [isOpen, releaseId]);\n\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n    \n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen]);\n\n  const loadAudioMatches = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      console.log(`[AudioMatchPopup] Loading audio matches for release ${releaseId}`);\n      \n      const response = await fetch(`/api/admin/releases/${releaseId}/audio-match`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load audio matches: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        setMatchData(result.data);\n        console.log(`[AudioMatchPopup] Loaded ${result.data.matches.length} track matches`);\n      } else {\n        throw new Error(result.error || 'Failed to load audio matches');\n      }\n    } catch (err) {\n      console.error('[AudioMatchPopup] Error loading audio matches:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load audio matches');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePreviewSelection = async (\n    trackPosition: string,\n    candidate: TrackCandidate,\n    selected: boolean\n  ) => {\n    if (selected) {\n      setSelectedMatches(prev => new Map(prev.set(trackPosition, candidate.id)));\n      \n      const decisionKey = `${trackPosition}-${candidate.id}`;\n      setProcessingDecisions(prev => new Set([...prev, decisionKey]));\n      \n      try {\n        console.log(`[AudioMatchPopup] Auto-approving selected preview: ${trackPosition} - ${candidate.platform}`);\n        \n        const response = await fetch(`/api/admin/releases/${releaseId}/tracks/${trackPosition}/match`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            platform: candidate.platform,\n            candidateId: candidate.id,\n            url: candidate.url,\n            approved: true,\n            confidence: candidate.confidence,\n            notes: 'Selected as preferred preview'\n          })\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Failed to record selection: ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log(`[AudioMatchPopup] Selection recorded:`, result);\n        \n      } catch (err) {\n        console.error('[AudioMatchPopup] Error recording selection:', err);\n        alert(`Failed to record selection: ${err instanceof Error ? err.message : 'Unknown error'}`);\n        setSelectedMatches(prev => {\n          const newMap = new Map(prev);\n          newMap.delete(trackPosition);\n          return newMap;\n        });\n      } finally {\n        setProcessingDecisions(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(decisionKey);\n          return newSet;\n        });\n      }\n    } else {\n      setSelectedMatches(prev => {\n        const newMap = new Map(prev);\n        newMap.delete(trackPosition);\n        return newMap;\n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/80 backdrop-blur-sm\">\n      <div className=\"bg-black/90 backdrop-blur-sm rounded-lg border border-white/20 w-full max-w-6xl max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-white/20\">\n          <div>\n            <h2 className=\"text-xl font-bold text-white\">Audio Verification - YouTube Focus</h2>\n            <p className=\"text-white/80\">{releaseTitle} - {releaseArtist}</p>\n            <p className=\"text-white/60 text-sm\">\n              {matchData ? `Displaying up to ${matchData.processedTracks} tracks` : 'Loading...'}\n            </p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n          >\n            <XMarkIcon className=\"w-6 h-6 text-white/80\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto max-h-[70vh]\">\n          {loading && (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n              <span className=\"ml-4 text-white\">Searching YouTube for audio matches...</span>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"bg-red-500/20 border border-red-500/30 rounded-lg p-4 mb-6\">\n              <p className=\"text-red-300\">{error}</p>\n              <button\n                onClick={loadAudioMatches}\n                className=\"mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n              >\n                Retry\n              </button>\n            </div>\n          )}\n\n          {matchData && (\n            <>\n              {/* Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"bg-green-500/20 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-green-400\">{selectedMatches.size}</div>\n                  <div className=\"text-white/60 text-sm\">YouTube Previews Selected</div>\n                </div>\n                <div className=\"bg-blue-500/20 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-blue-400\">{matchData.processedTracks}</div>\n                  <div className=\"text-white/60 text-sm\">Tracks Processed</div>\n                </div>\n                <div className=\"bg-yellow-500/20 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-yellow-400\">{matchData.matches.reduce((sum, match) => sum + match.candidates.filter(c => c.platform === 'youtube').length, 0)}</div>\n                  <div className=\"text-white/60 text-sm\">YouTube Matches Found</div>\n                </div>\n              </div>\n\n              {/* Track List */}\n              <div className=\"space-y-6\">\n                {matchData.matches.map((match) => {\n                  const youtubeCandidates = match.candidates.filter(c => c.platform === 'youtube');\n                  const selectedCandidateId = selectedMatches.get(match.trackPosition);\n                  \n                  return (\n                    <div key={match.trackPosition} className=\"bg-white/5 rounded-lg border border-white/10 p-6\">\n                      {/* Track Header */}\n                      <div className=\"mb-4\">\n                        <div className=\"flex items-center gap-4 mb-2\">\n                          <span className=\"text-white/60 font-mono text-sm bg-white/10 px-2 py-1 rounded\">{match.trackPosition}</span>\n                          <div>\n                            <div className=\"text-white font-medium text-lg\">{match.trackTitle}</div>\n                            <div className=\"text-white/60\">{match.trackArtist}</div>\n                          </div>\n                        </div>\n                        {selectedCandidateId && (\n                          <div className=\"text-green-400 text-sm flex items-center gap-2\">\n                            <CheckIcon className=\"w-4 h-4\" />\n                            YouTube preview selected and approved\n                          </div>\n                        )}\n                      </div>\n\n                      {/* YouTube Results */}\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center gap-2 mb-4\">\n                          <span className=\"text-2xl\">📺</span>\n                          <h4 className=\"text-white font-medium\">YouTube Results</h4>\n                          <span className=\"text-white/60 text-sm\">({youtubeCandidates.length} found)</span>\n                        </div>\n                        \n                        {youtubeCandidates.length === 0 ? (\n                          <div className=\"text-white/40 text-sm p-4 border border-white/10 rounded bg-white/5\">\n                            No YouTube matches found\n                          </div>\n                        ) : (\n                          youtubeCandidates.map(candidate => {\n                            const isSelected = selectedCandidateId === candidate.id;\n                            const decisionKey = `${match.trackPosition}-${candidate.id}`;\n                            const isProcessing = processingDecisions.has(decisionKey);\n                            \n                            return (\n                              <div\n                                key={candidate.id}\n                                className={`p-4 rounded border transition-all ${\n                                  isSelected \n                                    ? 'border-green-500/50 bg-green-500/10' \n                                    : 'border-red-500/30 bg-red-500/10 hover:border-red-500/50'\n                                }`}\n                              >\n                                <div className=\"flex items-start gap-3\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={isSelected}\n                                    disabled={isProcessing}\n                                    onChange={(e) => handlePreviewSelection(match.trackPosition, candidate, e.target.checked)}\n                                    className=\"mt-1 w-4 h-4 text-green-600 bg-transparent border-white/30 rounded focus:ring-green-500 focus:ring-2\"\n                                  />\n                                  \n                                  <div className=\"flex-1\">\n                                    <div className=\"text-white font-medium\">{candidate.title}</div>\n                                    <div className=\"text-white/60 text-sm mb-2\">\n                                      {candidate.artist} • {Math.floor(candidate.duration / 60)}:{(candidate.duration % 60).toString().padStart(2, '0')}\n                                    </div>\n                                    \n                                    <div className=\"flex items-center gap-2 mb-2\">\n                                      <span className={`px-2 py-1 rounded text-xs ${\n                                        candidate.classification === 'high' ? 'bg-green-500/20 text-green-400' :\n                                        candidate.classification === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :\n                                        'bg-red-500/20 text-red-400'\n                                      }`}>\n                                        {candidate.confidence}% match\n                                      </span>\n                                      \n                                      <button\n                                        onClick={() => {\n                                          if (playingAudio === candidate.id) {\n                                            setPlayingAudio(null);\n                                          } else {\n                                            setPlayingAudio(candidate.id);\n                                          }\n                                        }}\n                                        className=\"p-1 bg-white/10 hover:bg-white/20 rounded transition-colors\"\n                                      >\n                                        {playingAudio === candidate.id ? (\n                                          <PauseIcon className=\"w-3 h-3 text-white\" />\n                                        ) : (\n                                          <PlayIcon className=\"w-3 h-3 text-white\" />\n                                        )}\n                                      </button>\n                                      \n                                      <a\n                                        href={candidate.url}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        className=\"text-xs text-blue-400 hover:text-blue-300 transition-colors\"\n                                      >\n                                        View on YouTube\n                                      </a>\n                                    </div>\n                                    \n                                    {isProcessing && (\n                                      <div className=\"text-xs text-yellow-400\">Processing selection...</div>\n                                    )}\n                                    \n                                    {/* YouTube Video Embed */}\n                                    {candidate.videoId && playingAudio === candidate.id && (\n                                      <div className=\"mt-3\">\n                                        <iframe\n                                          width=\"400\"\n                                          height=\"225\"\n                                          src={`https://www.youtube.com/embed/${candidate.videoId}?autoplay=1&start=0`}\n                                          title={candidate.title}\n                                          style={{ border: 'none' }}\n                                          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                                          allowFullScreen\n                                          className=\"rounded\"\n                                        />\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })\n                        )}\n                      </div>\n                      \n                      {/* SoundCloud Status */}\n                      <div className=\"mt-6 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <span className=\"text-2xl\">☁️</span>\n                          <h4 className=\"text-white font-medium\">SoundCloud</h4>\n                          <span className=\"text-xs bg-blue-500/20 text-blue-300 px-2 py-1 rounded\">Temporarily Disabled</span>\n                        </div>\n                        <p className=\"text-sm text-white/70\">\n                          Focusing on YouTube integration first for maximum accuracy. SoundCloud can be re-enabled later.\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between p-6 border-t border-white/20\">\n          <div className=\"text-white/60 text-sm\">\n            {matchData && (\n              <>YouTube API integration active • {matchData.matches.length} tracks processed</>\n            )}\n          </div>\n          <button\n            onClick={onClose}\n            className=\"px-6 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}"
   : [35;1m             ^[0m
   `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/components/AudioMatchPopup.tsx
./src/components/RecordManagementModal.tsx
./src/app/stores/[storeId]/page.tsx
 ✓ Compiled /_error in 1572ms (1011 modules)
 ✓ Compiled in 3.4s (1011 modules)
 ✓ Compiled in 2.3s (1011 modules)
